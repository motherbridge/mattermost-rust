/*
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ChannelWithTeamData {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The time in milliseconds a channel was created
    #[serde(rename = "create_at", skip_serializing_if = "Option::is_none")]
    pub create_at: Option<i64>,
    /// The time in milliseconds a channel was last updated
    #[serde(rename = "update_at", skip_serializing_if = "Option::is_none")]
    pub update_at: Option<i64>,
    /// The time in milliseconds a channel was deleted
    #[serde(rename = "delete_at", skip_serializing_if = "Option::is_none")]
    pub delete_at: Option<i64>,
    #[serde(rename = "team_id", skip_serializing_if = "Option::is_none")]
    pub team_id: Option<String>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<String>,
    #[serde(rename = "display_name", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "header", skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(rename = "purpose", skip_serializing_if = "Option::is_none")]
    pub purpose: Option<String>,
    /// The time in milliseconds of the last post of a channel
    #[serde(rename = "last_post_at", skip_serializing_if = "Option::is_none")]
    pub last_post_at: Option<i64>,
    #[serde(rename = "total_msg_count", skip_serializing_if = "Option::is_none")]
    pub total_msg_count: Option<i64>,
    /// Deprecated in Mattermost 5.0 release
    #[serde(rename = "extra_update_at", skip_serializing_if = "Option::is_none")]
    pub extra_update_at: Option<i64>,
    #[serde(rename = "creator_id", skip_serializing_if = "Option::is_none")]
    pub creator_id: Option<String>,
    /// The display name of the team to which this channel belongs.
    #[serde(rename = "team_display_name", skip_serializing_if = "Option::is_none")]
    pub team_display_name: Option<String>,
    /// The name of the team to which this channel belongs.
    #[serde(rename = "team_name", skip_serializing_if = "Option::is_none")]
    pub team_name: Option<String>,
    /// The time at which the team to which this channel belongs was last updated.
    #[serde(rename = "team_update_at", skip_serializing_if = "Option::is_none")]
    pub team_update_at: Option<i64>,
    /// The data retention policy to which this team has been assigned. If no such policy exists, or the caller does not have the `sysconsole_read_compliance_data_retention` permission, this field will be null.
    #[serde(rename = "policy_id", skip_serializing_if = "Option::is_none")]
    pub policy_id: Option<String>,
}

impl ChannelWithTeamData {
    pub fn new() -> ChannelWithTeamData {
        ChannelWithTeamData {
            id: None,
            create_at: None,
            update_at: None,
            delete_at: None,
            team_id: None,
            _type: None,
            display_name: None,
            name: None,
            header: None,
            purpose: None,
            last_post_at: None,
            total_msg_count: None,
            extra_update_at: None,
            creator_id: None,
            team_display_name: None,
            team_name: None,
            team_update_at: None,
            policy_id: None,
        }
    }
}


